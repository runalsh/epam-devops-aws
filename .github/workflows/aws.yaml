
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
     # - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
     # - '.github/workflows/**'

jobs:
     
  #  deploys3:
  #   name: deploying S3 buckets
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: s3
  #   env:
  #     ACTION: Init S3 buckets for ECR and ECS with terraform
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
 
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1

  #     - name: Terraform format
  #       run: terraform fmt -check
  #       continue-on-error: true

  #     - name: Terraform init
  #       run: terraform init
      
  #     - name: Terraform validate
  #       run: terraform validate

  #     - name: Terraform plan
  #       id: plan
  #       run: terraform plan

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
  #       continue-on-error: true
                
  #  deployaws:
  #   name: deploying aws with terraform 
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: init
  #   needs: deploys3
  #   env:
  #     ACTION: Deploy AWS infrastructure with Terraform
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
 
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1

  #     - name: Terraform format
  #       run: terraform fmt -check
  #       continue-on-error: true

  #     - name: Terraform init
  #       run: terraform init
           
  #     - name: Terraform validate
  #       run: terraform validate

  #     - name: Terraform plan
  #       id: plan
  #       run: terraform plan
  #       continue-on-error: true

  #     # - name: Terraform Plan Status
  #       # if: steps.plan.outcome == 'failure'
  #       # run: exit 1

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
        
   buiildpushback:
    # needs: deployaws
    env:
      ACTION: Push backend image to AWS ECR
    name: Push backend image to AWS ECR
    defaults:
      run:
        working-directory: back
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: epamapp-back
          IMAGE_TAG: back-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

   buiildpushfront:
    # needs: deployaws
    env:
      ACTION: Push frontend image to AWS ECR
    name: Push frontend image to AWS ECR
    defaults:
      run:
        working-directory: front
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: epamapp-front
          IMAGE_TAG: front-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            




