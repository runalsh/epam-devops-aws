---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
---  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.container.name }}-back-{{ .Values.namespace }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.container.name }}-back-{{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.container.name }}-back-{{ .Values.namespace }}
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
    type: RollingUpdate    
  template:
    metadata:
      labels:
        app: {{ .Values.container.name }}-back-{{ .Values.namespace }}
    spec:
      # terminationGracePeriodSeconds: 60
      containers:
      - name: {{ .Values.container.name }}-back-{{ .Values.namespace }}
        image: {{ .Values.ecrname }}/{{ .Values.container.name }}-back-{{ .Values.namespace }}:{{ .Values.imagetag }}
        imagePullPolicy: Always
        env:
        - name: DB_HOST
          value: {{ .Values.dbhost }}
        - name: DB_NAME
          value: {{ .Values.dbname }}
        - name: DB_USER
          value: {{ .Values.dbuser }}
        - name: DB_PASSWORD
          value: {{ .Values.dbpassword }}
        - name: DB_PORT
          value: "{{ .Values.dbport }}"
        livenessProbe:
          httpGet:
            path: /back/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 15
        resources:
          limits: 
            memory: 64Mi
            cpu: "250m"
          requests:
            memory: 32Mi
            cpu: "200m"
        ports:
        - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.container.name }}-front-{{ .Values.namespace }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.container.name }}-front-{{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.container.name }}-front-{{ .Values.namespace }}
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
    type: RollingUpdate   
  template:
    metadata:
      labels:
        app: {{ .Values.container.name }}-front-{{ .Values.namespace }}
    spec:
      # terminationGracePeriodSeconds: 60
      containers:
      - name: {{ .Values.container.name }}-front-{{ .Values.namespace }}
        image: {{ .Values.ecrname }}/{{ .Values.container.name }}-front-{{ .Values.namespace }}:{{ .Values.imagetag }}
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /ping
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 15
        resources:
          limits: 
            memory: 64Mi
            cpu: "250m"
          requests:
            memory: 32Mi
            cpu: "200m"
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.container.name }}-back
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.container.name }}-back-{{ .Values.namespace }}
spec:
  type: ClusterIP
  selector:
      app: {{ .Values.container.name }}-back-{{ .Values.namespace }}
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.container.name }}-front-{{ .Values.namespace }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.container.name }}-front-{{ .Values.namespace }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: "loadbalancer"
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "loadbalancer"
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    external-dns.alpha.kubernetes.io/hostname: node-{{ .Values.namespace }}.a.runalsh.ru
    external-dns.alpha.kubernetes.io/ttl: "60"
    # service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
  #   ## annotations from https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/service/annotations/
spec:
  # type: ClusterIP
  type: LoadBalancer
  # type: NodePort
  selector:
    app: {{ .Values.container.name }}-front-{{ .Values.namespace }}
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns-{{ .Values.namespace }}
  # annotations:
  #   eks.amazonaws.com/role-arn: arn:aws:iam::619357854683:policy/routepolicy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns-{{ .Values.namespace }}
rules:
- apiGroups: [""]
  resources: ["services","endpoints","pods"]
  verbs: ["get","watch","list"]
- apiGroups: ["extensions","networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get","watch","list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer-{{ .Values.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns-{{ .Values.namespace }}
subjects:
- kind: ServiceAccount
  name: external-dns-{{ .Values.namespace }}
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns-{{ .Values.namespace }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns-{{ .Values.namespace }}
  template:
    metadata:
      labels:
        app: external-dns-{{ .Values.namespace }}
      # annotations:
      #   iam.amazonaws.com/role: arn:aws:iam::619357854683:policy/routepolicy
    spec:
      serviceAccountName: external-dns-{{ .Values.namespace }}
      containers:
      - name: external-dns-{{ .Values.namespace }}
        image: k8s.gcr.io/external-dns/external-dns:v0.11.0
        args:
        - --source=service
        - --source=ingress
        - --domain-filter=a.runalsh.ru
        - --provider=aws
        # - --policy=upsert-only
        - --aws-zone-type=public
        - --registry=txt
        - --txt-owner-id=my-hostedzone-identifier
      securityContext:
        fsGroup: 65534 


# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   namespace: {{ .Values.namespace }}
#   name: {{ .Values.container.name }}-front-{{ .Values.namespace }}
#   annotations:
#     kubernetes.io/ingress.class: "nginx"
#     # external-dns.alpha.kubernetes.io/hostname: "node.a.runalsh.ru"
#     # kubernetes.io/ingress.class: alb
#     # alb.ingress.kubernetes.io/target-type: instance
#     # alb.ingress.kubernetes.io/scheme: internet-facing
#     # alb.ingress.kubernetes.io/group.name: instance
#     ## annotations from https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/service/annotations/
# spec:
#   rules:
#     - host: ingress-{{ .Values.container.name }}-front-{{ .Values.namespace }}.a.runalsh.ru
#       http:
#        paths:
#        - pathType: Prefix
#          path: /
#          backend:
#            service:
#             name: {{ .Values.container.name }}-front-{{ .Values.namespace }}
#             port:
#               number: 80

# # ---
# # apiVersion: networking.k8s.io/v1
# # kind: Ingress
# # metadata:
# #   namespace: {{ .Values.namespace }}
# #   name: {{ .Values.container.name }}-back
# #   annotations:
# #     kubernetes.io/ingress.class: "nginx"
# # spec:
# #   rules:
# #     # - host: ingress-back-{{ .Values.container.name }}-{{ .Values.namespace }}
# #     - http:
# #        paths:
# #        - pathType: Prefix
# #          path: /
# #          backend:
# #            service:
# #             name: {{ .Values.container.name }}-back
# #             port:
# #               number: 8080

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.container.name }}-back-{{ .Values.namespace }}-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.container.name }}-back-{{ .Values.namespace }}
  minReplicas: {{ .Values.minbackreplicas }}
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ .Values.container.name }}-front-{{ .Values.namespace }}-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.container.name }}-front-{{ .Values.namespace }}
  minReplicas: {{ .Values.minfrontreplicas }}
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  # - type: Pods
  #   pods:
  #     metric:
  #       name: packets-per-second
  #     target:
  #       type: AverageValue
  #       averageValue: 200




